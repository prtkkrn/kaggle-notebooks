{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91718,"databundleVersionId":12738969,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/prateekkiran/personality-predictor-using-xgboost?scriptVersionId=248535968\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# 1. IMPORTING IMPORTANT LIBRARIES AND THE DATASETS ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:38:14.807767Z","iopub.execute_input":"2025-07-02T17:38:14.808072Z","iopub.status.idle":"2025-07-02T17:38:14.814234Z","shell.execute_reply.started":"2025-07-02T17:38:14.808051Z","shell.execute_reply":"2025-07-02T17:38:14.813224Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load Dataset\ndf = pd.read_csv('/kaggle/input/playground-series-s5e7/train.csv')\ntest_df = pd.read_csv('/kaggle/input/playground-series-s5e7/test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:38:14.815894Z","iopub.execute_input":"2025-07-02T17:38:14.816124Z","iopub.status.idle":"2025-07-02T17:38:14.868399Z","shell.execute_reply.started":"2025-07-02T17:38:14.816108Z","shell.execute_reply":"2025-07-02T17:38:14.867513Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 2. INITIAL DATA ANALYIS, PREPROCESSING AND CLEANING","metadata":{}},{"cell_type":"code","source":"df.info(), df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:38:14.869533Z","iopub.execute_input":"2025-07-02T17:38:14.869844Z","iopub.status.idle":"2025-07-02T17:38:14.899354Z","shell.execute_reply.started":"2025-07-02T17:38:14.869816Z","shell.execute_reply":"2025-07-02T17:38:14.898062Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Data Understanding\n**Dataset Shape**\n* Rows: 18,524\n\n* Columns: 9 (including the target Personality)\n\n| Column Name                 | Type   | Description                               |\n| --------------------------- | ------ | ----------------------------------------- |\n| `id`                        | int    | Unique identifier                         |\n| `Time_spent_Alone`          | float  | Amount of time spent alone                |\n| `Stage_fear`                | object | Presence of stage fear (Yes/No)           |\n| `Social_event_attendance`   | float  | Frequency of attending social events      |\n| `Going_outside`             | float  | Frequency of going outside                |\n| `Drained_after_socializing` | object | Whether the person feels drained socially |\n| `Friends_circle_size`       | float  | Number of close friends                   |\n| `Post_frequency`            | float  | Frequency of social media posts           |\n| `Personality`               | object | Target: 'Introvert' or 'Extrovert'        |\n\n\n| Column                      | Missing Values |\n| --------------------------- | -------------- |\n| Time\\_spent\\_Alone          | 1190           |\n| Stage\\_fear                 | 1893           |\n| Social\\_event\\_attendance   | 1180           |\n| Going\\_outside              | 1466           |\n| Drained\\_after\\_socializing | 1149           |\n| Friends\\_circle\\_size       | 1054           |\n| Post\\_frequency             | 1264           |\n\n\n* Missing values are fairly spread out,weâ€™ll handle them before modeling.","metadata":{}},{"cell_type":"code","source":"test_df.info(), test_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:38:14.901682Z","iopub.execute_input":"2025-07-02T17:38:14.902396Z","iopub.status.idle":"2025-07-02T17:38:14.921372Z","shell.execute_reply.started":"2025-07-02T17:38:14.90236Z","shell.execute_reply":"2025-07-02T17:38:14.920114Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Check for missing values in the test dataset\nmissing_values_test = test_df.isnull().sum()\n\n# Display columns with missing values\nmissing_values_test[missing_values_test > 0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:38:14.922572Z","iopub.execute_input":"2025-07-02T17:38:14.923213Z","iopub.status.idle":"2025-07-02T17:38:14.946746Z","shell.execute_reply.started":"2025-07-02T17:38:14.923179Z","shell.execute_reply":"2025-07-02T17:38:14.945385Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Copy the original dataframe to preserve raw data\ndf_cleaned = df.copy()\n\n# Drop the 'id' column as it's not informative\ndf_cleaned.drop(columns=['id'], inplace=True)\n\n# Binary encode 'Stage_fear' and 'Drained_after_socializing' (Yes=1, No=0)\nbinary_map = {'Yes': 1, 'No': 0}\ndf_cleaned['Stage_fear'] = df_cleaned['Stage_fear'].map(binary_map)\ndf_cleaned['Drained_after_socializing'] = df_cleaned['Drained_after_socializing'].map(binary_map)\n\n# Fill missing values\nfor col in df_cleaned.select_dtypes(include=['float64']).columns:\n    df_cleaned[col].fillna(df_cleaned[col].median(), inplace=True)\n\nfor col in ['Stage_fear', 'Drained_after_socializing']:\n    df_cleaned[col].fillna(df_cleaned[col].mode()[0], inplace=True)\n\n# Encode target variable 'Personality' as binary: Introvert=0, Extrovert=1\ndf_cleaned['Personality'] = df_cleaned['Personality'].map({'Introvert': 0, 'Extrovert': 1})\n\n# Check cleaned data\ndf_cleaned.info(), df_cleaned.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:38:14.948102Z","iopub.execute_input":"2025-07-02T17:38:14.948781Z","iopub.status.idle":"2025-07-02T17:38:14.995967Z","shell.execute_reply.started":"2025-07-02T17:38:14.948747Z","shell.execute_reply":"2025-07-02T17:38:14.994874Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"# Copy the original dataframe to preserve raw data\ntest_df_cleaned = test_df.copy()\n\n\n# Binary encode 'Stage_fear' and 'Drained_after_socializing' (Yes=1, No=0)\nbinary_map = {'Yes': 1, 'No': 0}\ntest_df_cleaned['Stage_fear'] = test_df_cleaned['Stage_fear'].map(binary_map)\ntest_df_cleaned['Drained_after_socializing'] = test_df_cleaned['Drained_after_socializing'].map(binary_map)\n\n# Fill missing values\nfor col in df_cleaned.select_dtypes(include=['float64']).columns:\n    test_df_cleaned[col].fillna(test_df_cleaned[col].median(), inplace=True)\n\nfor col in ['Stage_fear', 'Drained_after_socializing']:\n    test_df_cleaned[col].fillna(test_df_cleaned[col].mode()[0], inplace=True)\n\n\n\n# Check cleaned data\ntest_df_cleaned.info(), test_df_cleaned.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:38:14.997185Z","iopub.execute_input":"2025-07-02T17:38:14.998004Z","iopub.status.idle":"2025-07-02T17:38:15.025865Z","shell.execute_reply.started":"2025-07-02T17:38:14.997965Z","shell.execute_reply":"2025-07-02T17:38:15.025082Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 3. EXPLORATORY DATA ANALYSIS(EDA)","metadata":{}},{"cell_type":"code","source":"# Set plot aesthetics\nsns.set(style='whitegrid')\nplt.rcParams[\"figure.figsize\"] = (10, 6)\n\n# Plot distributions of numeric features by Personality\nnumeric_cols = df_cleaned.drop(columns='Personality').columns\npersonality_map = {0: 'Introvert', 1: 'Extrovert'}\n\n# Plot each numeric feature\nfor col in numeric_cols:\n    plt.figure()\n    sns.kdeplot(data=df_cleaned, x=col, hue=df_cleaned['Personality'].map(personality_map), fill=True)\n    plt.title(f'{col} Distribution by Personality')\n    plt.xlabel(col)\n    plt.ylabel('Density')\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:38:15.026925Z","iopub.execute_input":"2025-07-02T17:38:15.027268Z","iopub.status.idle":"2025-07-02T17:38:18.669588Z","shell.execute_reply.started":"2025-07-02T17:38:15.027239Z","shell.execute_reply":"2025-07-02T17:38:18.668435Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Key EDA Insights\n**Based on the box plots, here are the major observations comparing Introverts (0) and Extroverts (1):**\n\n**Time_spent_Alone**\n* Introverts tend to spend significantly more time alone.\n\n* Median and IQR both skew higher compared to extroverts.\n\n**Stage_fear**\n* Introverts are more likely to have stage fear (higher median).\n\n* Clear difference in the distribution.\n\n**Social_event_attendance**\n* Extroverts attend more social events on average.\n\n* Strong separation between the two personality types.\n\n**Going_outside**\n* Extroverts go outside more frequently.\n\n* Distribution shifts visibly right for extroverts.\n\n**Drained_after_socializing**\n* Strong signal: Introverts are much more likely to feel drained after socializing.\n\n**Friends_circle_size**\n* Extroverts have a noticeably larger friends circle.\n\n* High predictive potential.\n\n**Post_frequency**\n* Extroverts post more often on social media.\n\n* More spread in extrovert group too.","metadata":{}},{"cell_type":"code","source":"# Compute correlation matrix\ncorrelation_matrix = df_cleaned.corr()\n\n# Plot heatmap of correlations\nplt.figure(figsize=(10, 8))\nsns.heatmap(correlation_matrix, annot=True, fmt=\".2f\", cmap='coolwarm', square=True)\nplt.title(\"Correlation Matrix of Features\")\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:38:18.672316Z","iopub.execute_input":"2025-07-02T17:38:18.672736Z","iopub.status.idle":"2025-07-02T17:38:19.157584Z","shell.execute_reply.started":"2025-07-02T17:38:18.672707Z","shell.execute_reply":"2025-07-02T17:38:19.156508Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Correlation Analysis\n**Here's what the correlation matrix reveals:**\n\n| Feature                         | Correlation with Personality  |\n| ------------------------------- | ----------------------------- |\n| **Drained\\_after\\_socializing** | **-0.69** (strongly negative) |\n| **Time\\_spent\\_Alone**          | **-0.63** (strongly negative) |\n| **Friends\\_circle\\_size**       | **+0.60** (strong positive)   |\n| **Social\\_event\\_attendance**   | **+0.52** (moderate positive) |\n| **Going\\_outside**              | **+0.41** (moderate positive) |\n| **Post\\_frequency**             | **+0.34** (moderate positive) |\n| **Stage\\_fear**                 | **-0.33** (moderate negative) |\n","metadata":{}},{"cell_type":"markdown","source":"# Interpretation:\n**As expected, Introverts (coded as 0) are more likely to:**\n\n* Feel drained after socializing\n\n* Spend more time alone\n\n* Have smaller friend circles\n\n**Extroverts (coded as 1) are:**\n\n* More socially active and outgoing\n\n* Less likely to have stage fear","metadata":{}},{"cell_type":"markdown","source":"# 4. MODEL TRAINING AND HYPERPARAMETER TUNING","metadata":{}},{"cell_type":"code","source":"# Prepare Training Data\nX_train = df_cleaned.drop(columns='Personality')\ny_train = df_cleaned['Personality']\n\n# Best Model: XGBoost with Hyperparameter Tuning\nxgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\nparam_grid = {\n    'n_estimators': [200, 300, 400],\n    'max_depth': [5, 7, 9],\n    'learning_rate': [0.05, 0.1, 0.2],\n    'subsample': [0.8, 0.9, 1.0],\n    'colsample_bytree': [0.8, 0.9, 1.0],\n    'gamma': [0, 1, 5]\n}\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\ngrid_search = GridSearchCV(xgb, param_grid, cv=cv, scoring='accuracy', n_jobs=-1, verbose=1)\ngrid_search.fit(X_train, y_train)\n\n# Best Model\nbest_model = grid_search.best_estimator_\nprint(\"Best Parameters:\", grid_search.best_params_)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:47:19.907248Z","iopub.execute_input":"2025-07-02T17:47:19.907562Z","iopub.status.idle":"2025-07-02T17:57:45.161995Z","shell.execute_reply.started":"2025-07-02T17:47:19.907543Z","shell.execute_reply":"2025-07-02T17:57:45.160019Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Training Metrics\ny_train_preds = best_model.predict(X_train)\nprint(\"Accuracy:\", accuracy_score(y_train, y_train_preds))\nprint(\"Classification Report:\\n\", classification_report(y_train, y_train_preds))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:58:20.707181Z","iopub.execute_input":"2025-07-02T17:58:20.707496Z","iopub.status.idle":"2025-07-02T17:58:20.775918Z","shell.execute_reply.started":"2025-07-02T17:58:20.707477Z","shell.execute_reply":"2025-07-02T17:58:20.775127Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_ids = test_df_cleaned['id']\nX_test = test_df_cleaned.drop(columns='id')\n\n# Final Predictions\nfinal_preds = best_model.predict(X_test)\nresults = pd.DataFrame({\n    'id': test_ids,\n    'Personality': ['Introvert' if p == 0 else 'Extrovert' for p in final_preds]\n})\n\n# Save predictions to CSV\nresults.to_csv('/kaggle/working/submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-02T17:58:37.351689Z","iopub.execute_input":"2025-07-02T17:58:37.352098Z","iopub.status.idle":"2025-07-02T17:58:37.381243Z","shell.execute_reply.started":"2025-07-02T17:58:37.351933Z","shell.execute_reply":"2025-07-02T17:58:37.380477Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}